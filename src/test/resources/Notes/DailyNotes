Automation Testing:
---------
Testing any application feature with the help of Automation tool .
-----------
Protector
Sahi
Sahi pro
Appium 
Selenium
Ranorex

Manual Testing Dis 
-------------------------
1.required more resources 
2.Regression Testing ---time consuming 
3.CrossBrowser Testing --- time consuming and its difficults
    5 Browser -- 1 Test -- 10 min =5*10 =50 min 
4.test cycle duration increase 

Automation Testing Adv
-------------------------
1. required less resources 
2. Regression Testing -- less time required 
3. crossBowser Testing -- required less time and its easy
4. Test cycle duration decrease 

Selenium
===============
1.open sources - no licence required 
2.support multiple langauges -- Java ,C#,JS,Python ...
3.support multiple O.S.
4.its support crossBrowser Test

Selenium Dis
----------------
1. we can automate only Web Application - we can not automate StandAlone Application EX. Calculator 
2. captcha and Barcode --we can not Automate  
3. file upload and file download task --- AutoIT /Robot class 

======================================================================

Maven Project  ---
Maven -- Build Managment tool 

src/main/java
src/main/resources
src/test/java
  com.Test
     Test1
     Test2
src/test/resources
pom.xml  ---- we add dependancy
Maven depenadancies ---- requried jar file
=================================================

Selenium Arch

Search context (I) --extends-WebDriver (I)---Implements--Remote WebDriver Class (C)-extends--
Multiple Browser driver classes (ChromeDriver ,EdgeDriver,..) (C)


Maven repo :

https://mvnrepository.com/

=========================
Selenium dependancy
<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>4.15.0</version>
</dependency>

===============================================

First Script Automation Script
-------------
Selenium -- Add
WebDriverManager --- Browser execution --- setup 

Browser.exe 
system.setProperty(key,value);
====================================================
navigation 

driver.navigate().to("url");

driver.navigate.back();

driver.navigate.forward();

driver.navigate.refresh();
============================================
WebElement -- Any thing on Webpage 

text field ,Radio Button ,check box ,Button ,link ,Img ,text

Locators -- we identify webelement 

8 types of Locators 

1.Id
2.Name
3.className
4.Tagname
5.Xpath
6.LinkText
7.Partial link text
8.CSS 

WebElement EmailID=driver.findElement(By.name("email"));
EmailID.sendKeys("Test123@gmail.com");

WebElement Password=driver.findElement(By.name("pass"));
Password.sendkeys("12345678");

WebElement LoginButton=driver.findElement(By.name("login"));
LoginButton.click();

===============================================
Task Url = https://demo.guru99.com/test/newtours/register.php


ID  -Locator 

WebElement element=driver.findElement(By.id("value"));

if(element.isenabled && element.isDispalyed){
   element.sendkeys("Test");
}
else{
  //syso
}

T && T =T
T && F =F
F && T =F
F && F =F
==================================================
Xpath ---> WebElement identify

 1.Absolute Xpath
 ------------------------
 parent node navigate immidiate child node ---Webelement 
 Xpath ---
 
 Start "/"
 1. Xpath expression lengthly 
 2. UI changes --- xpath collapse 
 
 1234567
 
 WebElement element =driver.findElement(By.xpath("/html/body/div[1]/div[1]/div[1]/div/div/div/div[2]/div/div[1]/form/div[1]/div[1]/input"));

 2.Relative Xpath 
==========================
parent node navigate any child node 
Child Node 

-start "//"

Xpath by attribute 
Xpath by text
Xpath by contains 
Xpath by index 

================================================

DOM ---html 

tagname -- anything after <
ex. <input
    <div
    <frame
    <li

attribute
attributevalue

attribute="attributevalue"
ex.
id="123"
name="test"
type="text"

text
------------
>text<

ex.>Forgotten password?<

1.Xpath by attribute == ID,name
-----------------------------------

//tagname[@attributename='attributevalue']

ex.//input[@id='email']

WebElement element=driver.findElement(By.xpath("//input[@id='email']"));

2. Xpath by contains 
---------------------------
//tagname[contains(@attributename,'static value attribute')]
ex.//button[contains(@id,'u_0_5')]

//tagname[conatins(text(),'static value of text')]

ex .//a[contains(text(),'Forgotten ')]


WebElement element=driver.findElement(By.xpath("//button[contains(@id,'u_0_5')]"));


3. Xpath by text
------------------------
//tagname[text()='text value']

ex.//a[text()='Forgotten password?']


WebElement element=driver.findElement(By.xpath("//a[text()='Forgotten password?']"));

4. Xpath by index 
----------------------

(xpath expression)[index]
ex.
(//input[@type='text'])[3]

WebElement element=driver.findElement(By.xpath("(//input[@type='text'])[3]"));

==========================================
//tagname[@attributename='value']
//tagname[contains(@attributename,'static value ')]
//tagname[contains(text(),'static value')]

//tagname[text()='text value ']

(xpath expression)[index]

================================================

Select Class -How to handle dropdown 

DropDown ---tagname select -- Select class 

WebElement Country=driver.findElement(By.xpath("xpath expression"));
Select dropdown= new Select(Country);
dropdown.selectByIndex(3);
dropdown.selectByvalue("8");
dropdown.selectByVisibletext("ANTARCTICA");


List<WebElement> list=dropdown.getOptions();

list.get(0)
String text=list.get(1).gettext();


for(int i=0;i<list.size();i++){

  String value=list.get(i).gextext();

  if(value.equals("ABC")){
  
    list.get(i).click();
    break;
  }

}

== equals 

====================================================

How to capture Screenshot 
----------------

FullPage 
WebElement

SC -->Webdriver ,TakesScreenshot---RWC ---browserDriver classes 
TakesScreenshot --Interface 


How to capture FullPage
--------------------------------
TakesScreenshot ts=(TakesScreenshot)driver; // WebDriver driver=new ChromeDriver();
                                            
TakesScreenshot ts=driver;  // ChromeDriver driver=new ChromeDriver();
File src=ts.getScrrenshotAs(outputType.FILE);
File destn=new File(Location//Test.png);
FileHandler.copyFile(src,destn);

String Location =System.getproperty("user.dir");

String RM=RandomString.make(5);

// use date to save scrrenshot name 

SimpleDateFormat formater=new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
Date date=new Date();
String Currentdate=formater.format(date);
String cDate=Currentdate.replace("/","_").replace(" ", "_").repalce(":","_");
=================================

How to get Screenshot of WebElement

WebElement element=driver.findElement(By.xpath("Xpath expression"));
File src=element.getscreenshotAs(outPutType.FILE);
File destn=new File(location\\elementname.png);
FileUtils.copyfile(src,destn);

==========================================

Scroll on WebPage 
----------------------
Pixel 
WebElement

SC -WD ,TS ,JS --RWC --Multiple Browser driver classes 

JavaScriptExecutor js=(JavaScriptExecutor)driver; // WebDriver driver

JavaScriptExecutor js=driver; //ChromeDriver driver

//Top -Bottom 
js.executeScript("window.scrollBy(0,350)"," "); // vertically 350 pixel

//Bottom -top
js.executeScript("window.scrollBy(0,-350)"," "); // vertically -350 pixel


================================================================

Actions class 
-------------------------------------
mouse movement and keyboard actions 

element --mouse hover --options ---click
double click 
right click 
source drag destn drop 

element --Upper case 
text data -ctrl + c ctrl +v


Actions act=new Actions(driver);

act.movetoelement(element).click().build().perform();

================================================================

Actions act=new Actions(driver);
		WebElement src=driver.findElement(By.xpath("(//a[@class='button button-orange'])[5]"));
		WebElement target=driver.findElement(By.xpath("(//li[@class='placeholder'])[1]"));
		act.dragAndDrop(src, target).build().perform();
		
		Library.dragDropActions(driver, src, target);
		
		
		==============================================
		
		keyDown()
		KeyUp()
		
		ex . WebELement ---Uppercase ---Keyboard TEST
		
		Actions act=new Actions(driver);

      act.keyDown(element ,Keys.SHIFT).sendkeys("test").keyUp(Keys.SHIFT).build().perform();


       ctrl+a  -select
       
       ctrl +c 
       
       element -hit
       
       ctrl +v

====================================================================
How to read Test Data from Excel

WebElement element=driver.findElement(By.xpath("Xpath expression"));
element.sendKeys("Test@gmail.com");

excel --row ,cell

Apache POI --

poi common 
poi ooxml 

--------------------------
excel --
//step 1
String path="C:\Users\Dell\eclipse-workspace\AutomationTestProject_Batch23\TestData\Data.xlsx";
//step 2
FileInutStream file=new FileInutStream(path);
//step 3
XSSFWorkbook wb=new XSSFWorkbook(file);
//step 4
String data=wb.getsheetname("Sheet1").getrow(0).getcell(0).getStringcellvalue();

WebElement element=driver.findElement(By.xpath("Xpath expression"));
element.sendKeys(data);

----------------------------------------------

double d=12.0 ;
Numeric Test data

String path="excel location";
FileInputStream fis=new FileInputStream(path);
XSSFWorkbook wb=new XSSFWorkbook(fis);

double data=wb.getsheetname("Sheet2").getrow(0).getcell(1).getnumericeCellValue();

String data1=String.valueof(data);

WebElement element=driver.findElement(By.xpath("Xpath expression"));
element.sendKeys(data1);
=====================================================================
Pop Up handling 
---------------------------
Alert 
Child Browser Pop Up Handle 


Alert --

warning/notify message --- end client 

Simple Alert  ---warning message --action 
Prompt Alert  --- End client --input 
Confirmation Alert --- confirmation from end client 


Alert alt =driver.switchto().alert();

alt.accept() ---- Ok button click
alt.Dismiss() --- cancel button click
alt.gettext() --- alert text 
alt.sendkeys() --- prompt alert case -- user input 

========================================================

Child Browser window PopUp
-----------
String parentID=driver.getwindowhandle(); // parent window ID

Set<String> ALLID=driver.getwindowhandles(); // Parent+ Child window ID


List<String> list=new ArrayList<String>(ALLID);

list.get(0); // parent window ID
list.get(1); // child window ID

driver.switchto().window(list.get(1)); // switch Child Window 
//
driver.close();

driver.switchto().window(parentID); // switch parent window 
===============================================================
Iframe Handle /
one html document embedded into another html document 
publish external resource on the webpage

frame/frameset -deprecated Html 5


driver.switchto().frame(webelemnt);
driver.switchto().frame(index int); //2 ,3
driver.switchto().frame(string name or id);

Scenario 1:

MainPage--> frame1 ,frame2

frame1 --> mainpage
 driver.switchto().deafaultcontent(); // main page
 
 Mainpage -->frame2 

Mainapage -->frame1
driver.switchto().frame(); //Mainapage --frame1

driver.switchto().deafaultcontent(); //Mainapage <--frame1

mainpage-->frame2
driver.switchto().frame(); 
----------------
Scenario 2:

Mainapage -->Frame1 --->innerframe

driver.switchto().frame(element); //Mainapage -->Frame1
driver.switchto().frame(element); //Frame1 --->innerframe

driver.switchto().parentframe();    //Frame1 <---innerframe
driver.switchto().deafaultcontent(); //Mainapage <--Frame1

======================================================================
TestNG -Test Managment Tool /TESTNG Framework
----------
TestNG -Test Next Genration

--multiple annoatation ,keyword 
class LoginTest --Testng.xml --runner file

testng Test Report -- html 

@Test
public void abc()
{
}

@Test(enabled=false)
public void pqr()
{
}

@Test(invocationcount=3 ,dependsOnMethods="abc")
public void xyz()
{
}
----------------------------------
keyword 

priority
enabled=false
invocationcount
dependsOnMethods
groups

Regression (160) +Critical Regression(40) = Regression Suite -- 200

12.0.0
12.1.1 -- Critical Regression Suite

Testng.xml --->

====================================
Install 
=======================================================
Annotation
-- '@'prefix
-- tag -- represent additional information about class or method

Before
@BeforeSuite
@BeforeTest
@BeforeClass
@BeforeMethod --Browser Opening 
@Test 
@Test
@Test
After 
@AfterMethod  -Browser close
@AfterClass
@AfterTest
@AfterSuite
================================

priority -- 0 ,+-1

enabled=false
invocationcount=2
dependsOnMethod

===================================
Regression ,Critical Regression 

groups 

Regression suite --- code fridge 

Regression suite --700  -- 2 bug -dev --test 

Critical Regression Suite -150 

@Test(groups={"Regression"})
public void test(){

}

testng.xml
======================

TC -- 20 -- peer review --- 25 ---> Test --> 25 PO review  ---5 TC Automation Script

=========================================
groups ---

cross Browser Test
-------------
Testing application feature with multiple Browser 

ex .Chrome ,Edge ,Firefox ....


Script ---> 


public static WebDriver driver;

@Parameters("BrowserName")
@BeforeMethod
public void setUp(String BrowserName){



  if(BrowserName.equalsignorecase("Chrome")){
  
      WebDriverManagaer.chromeDriver().setup();
      driver=new ChromeDriver();
  
  
  }
  
  else if(BrowserName.equalsignorecase("Edge")){
  
      WebDriverManagaer.edgeDriver().setup();
      driver=new EdgeDriver();
  
  }
}
=========================================================

Pom with Pagefactory
-------------
page object model with pagefactory 

10 webpages = 10 Pom class 

Login --- LoginPom
Homepage -- HomepagePom

Element repo

testclass 
--------------
Pagefactory.

=========================
pomclass
    constructor ---

BaseClass 

@BS
Object POMclass

@BM
@AM

Library

Test extends BaseClass

@Test
===================================================
Assert --result of operation verify 

Assert /Hard Assert---class --TestNG 

SoftAssert /Verify 

Expected string ="Xyz";
=========================================================
Git and Github

Automation QA --Team- Framework --Script

Common Github/BitBucket

Git --version control system 

git init --- initalised empty git repo /.git
git remote add origin url
git add .
git commit -m "message"
git push origin master

Pull Request --PR raise

git pull origin master

-----------------------
git download --- Done 
------------------------------------
1.
-------------
repo crdentials 

url repo 

clone system --- repo ---local system 

git clone url 
git clone https://github.com/GovindPatil75/TDDFramework.git
import -eclipse 
=========================
master -main branch
PR raise 

local branch -- pull 

git pull origin master

QA1
QA2
QA3
QA4

PE_1234
======================
PR -pull request raise 
=================================

git branch
git branch branchname
git checkout branchname -- switch to local branch
git pull origin master  --repo -local = take lastest code of master to local branch

--Script write 

git add .   -- add code to stage area 
git commit -m "Message"  - take permanaent snapshot of code -- commit id 
git push origin branchname - local -Repo 
==========================================================
$ git branch
* master

Dell@DESKTOP-QVM6J4J MINGW64 ~/eclipse-workspace/DemoBatch22 (master)
$ git branch PE_1234

Dell@DESKTOP-QVM6J4J MINGW64 ~/eclipse-workspace/DemoBatch22 (master)
$ git branch
  PE_1234
* master

Dell@DESKTOP-QVM6J4J MINGW64 ~/eclipse-workspace/DemoBatch22 (master)
$ git checkout PE_1234
Switched to branch 'PE_1234'

Dell@DESKTOP-QVM6J4J MINGW64 ~/eclipse-workspace/DemoBatch22 (PE_1234)
$ git pull origin master
From https://github.com/GovindPatil75/DemoBatch22
 * branch            master     -> FETCH_HEAD
Already up to date.

Dell@DESKTOP-QVM6J4J MINGW64 ~/eclipse-workspace/DemoBatch22 (PE_1234)
$ git add .

Dell@DESKTOP-QVM6J4J MINGW64 ~/eclipse-workspace/DemoBatch22 (PE_1234)
$ git commit -m "Test 3 added"
[PE_1234 ed7fb1b] Test 3 added
 2 files changed, 11 insertions(+)
 create mode 100644 src/test/java/com/Test/Test_3.java
 create mode 100644 target/test-classes/com/Test/Test_3.class

Dell@DESKTOP-QVM6J4J MINGW64 ~/eclipse-workspace/DemoBatch22 (PE_1234)
$ git push origin PE_1234
Enumerating objects: 23, done.
Counting objects: 100% (23/23), done.
Delta compression using up to 8 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (13/13), 1.21 KiB | 1.21 MiB/s, done.
Total 13 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
remote:
remote: Create a pull request for 'PE_1234' on GitHub by visiting:
remote:      https://github.com/GovindPatil75/DemoBatch22/pull/new/PE_1234
remote:
To https://github.com/GovindPatil75/DemoBatch22.git
 * [new branch]      PE_1234 -> PE_1234

======================================================

git branch branchname 
git checkout branchname 
git pull origin master
--- script write 

git add location 
git commit -m "message"
git push origin  branchname

git status --- untraced /modify 
====================================================
Selenium Waits 

1.implicit wait

--globally apply all the Elements 
--throw No such ELement Exception 
syntax :
driver.manage().timeout().implicitlywait(Duration.ofsecond(10));

2.Explicit wait 
----------------------
 -- applicable perticular element 
 -- use with condition 
 --Element not visibile Exception 
 
 syntax :
 
 WebDiverWait wait=new WebDiverWait(driver,Duration.OfSecond(5));
 wait.until(ExpectedConditions.visibilityofELement(element));

Fluent wait 








































